package com.moordash.service.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.moordash.constant.MessageConstant;
import com.moordash.constant.StatusConstant;
import com.moordash.dto.DishDTO;
import com.moordash.dto.DishPageQueryDTO;
import com.moordash.entity.Dish;
import com.moordash.entity.DishFlavor;
import com.moordash.entity.Setmeal;
import com.moordash.entity.SetmealDish;
import com.moordash.exception.DeletionNotAllowedException;
import com.moordash.mapper.DishFlavorMapper;
import com.moordash.mapper.DishMapper;
import com.moordash.mapper.SetmealDishMapper;
import com.moordash.mapper.SetmealMapper;
import com.moordash.result.PageResult;
import com.moordash.service.DishService;
import com.moordash.vo.DishVO;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
public class DishServiceImpl implements DishService {

    @Autowired
    private DishMapper dishMapper;

    @Autowired
    private DishFlavorMapper dishFlavorMapper;

    @Autowired
    private SetmealDishMapper setmealDishMapper;

    @Autowired
    private SetmealMapper setmealMapper;

    /**
     * Add a new dish together with its flavor info
     * @param dishDTO
     */
    @Override
    @Transactional
    public void saveWithFlavor(DishDTO dishDTO) {
        Dish dish = new Dish();
        BeanUtils.copyProperties(dishDTO, dish);

        // insert a record into the dish table
        dishMapper.insert(dish);

        // Get the primary key value generated by the insert statement
        Long dishId = dish.getId();

        List<DishFlavor> flavors = dishDTO.getFlavors();
        if (flavors != null && flavors.size() > 0) {
            flavors.forEach(dishFlavor -> dishFlavor.setDishId(dishId));
            // insert n records into the dish_flavor table
            dishFlavorMapper.insertBatch(flavors);
        }
    }

    /**
     * Paginated query of dishes
     * @param dishPageQueryDTO
     * @return
     */
    @Override
    public PageResult pageQuery(DishPageQueryDTO dishPageQueryDTO) {
        PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());
        Page<DishVO> page=dishMapper.pageQuery(dishPageQueryDTO);
        return new PageResult(page.getTotal(), page.getResult());
    }

    /**
     * Batch delete dishes
     * @param ids
     */
    @Override
    @Transactional
    public void deleteBatch(List<Long> ids) {
        // check if the current dish could be deleted: whether it is on sale
        ids.forEach(id->{
            Dish dish = dishMapper.getById(id);
            if (dish.getStatus() == StatusConstant.ENABLE) {
                // The current dish is on sale and cannot be deleted
                throw new DeletionNotAllowedException(MessageConstant.DISH_ON_SALE);
            }
        });

        // check if the current dish could be deleted: whether it is associated with a set meal
        List<Long> setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);
        if (setmealIds != null && setmealIds.size() > 0) {
            // The current dish is associated with a set meal and cannot be deleted
            throw new DeletionNotAllowedException(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);
        }

        // delete dish data in the dish table
        ids.forEach(id -> {
            dishMapper.deleteById(id);
            // delete the flavor data associated with the dish
            dishFlavorMapper.deleteByDishId(id);
        });

    }

    /**
     * Query dish by id
     * @param id
     * @return
     */
    @Override
    public DishVO getByIdWithFlavor(Long id) {
        // Query dish data by id
        Dish dish = dishMapper.getById(id);

        // Query flavor data by dish id
        List<DishFlavor> dishFlavorList = dishFlavorMapper.getByDishId(id);

        // Encapsulate the queried data into vo
        DishVO dishVO = new DishVO();
        BeanUtils.copyProperties(dish, dishVO);
        dishVO.setFlavors(dishFlavorList);

        return dishVO;
    }

    /**
     * Update a dish together with its flavor info
     * @param dishDTO
     */
    @Override
    public void updateWithFlavor(DishDTO dishDTO) {
        Dish dish = new Dish();
        BeanUtils.copyProperties(dishDTO, dish);

        // update the basic information of the dish
        dishMapper.update(dish);

        // delete the original flavor data associated with the dish
        dishFlavorMapper.deleteByDishId(dishDTO.getId());

        // Insert updated flavor data
        List<DishFlavor> flavors = dishDTO.getFlavors();
        if (flavors != null && flavors.size() > 0) {
            flavors.forEach(dishFlavor -> dishFlavor.setDishId(dishDTO.getId()));
            // insert n records into the dish_flavor table
            dishFlavorMapper.insertBatch(flavors);
        }

    }

    /**
     * Query dishes by category id
     * @param categoryId
     * @return
     */
    @Override
    public List<Dish> list(Long categoryId) {
        Dish dish = Dish.builder()
                .categoryId(categoryId)
                .status(StatusConstant.ENABLE)
                .build();
        return dishMapper.list(dish);
    }

    /**
     * Conditional query of dishes and flavors
     * @param dish
     * @return
     */
    @Override
    public List<DishVO> listWithFlavor(Dish dish) {
        List<Dish> dishList = dishMapper.list(dish);

        ArrayList<DishVO> dishVOArrayList = new ArrayList<>();

        dishList.forEach(d->{
            DishVO dishVO = new DishVO();
            BeanUtils.copyProperties(d, dishVO);

            // Query the corresponding flavor according to the dish id
            List<DishFlavor> flavors = dishFlavorMapper.getByDishId(d.getId());

            dishVO.setFlavors(flavors);
            dishVOArrayList.add(dishVO);
        });

        return dishVOArrayList;
    }

    /**
     * Set the status of a dish to on sale or off sale
     * @param status
     * @param id
     */
    @Override
    @Transactional
    public void startOrStop(Integer status, Long id) {
        Dish dish = Dish.builder()
                .id(id)
                .status(status)
                .build();
        dishMapper.update(dish);

        if (status == StatusConstant.DISABLE) {
            // if it is a stop sale operation, the set meal containing the current dish also needs to be stopped
            List<Long> dishIds = new ArrayList<>();
            dishIds.add(id);
            // select setmeal_id from setmeal_dish where dish_id in (?,?,?)
            List<Long> setmealIds = setmealDishMapper.getSetmealIdsByDishIds(dishIds);
            if (setmealIds != null && setmealIds.size() > 0) {
                for (Long setmealId : setmealIds) {
                    Setmeal setmeal = Setmeal.builder()
                            .id(setmealId)
                            .status(StatusConstant.DISABLE)
                            .build();
                    setmealMapper.update(setmeal);
                }
            }
        }
    }

}
