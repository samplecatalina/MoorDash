package com.moordash.config;

import com.moordash.interceptor.JwtTokenAdminInterceptor;
import com.moordash.interceptor.JwtTokenUserInterceptor;
import com.moordash.json.JacksonObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;

import java.util.List;

/**
 * Configuration class, register web layer related components
 */
@Configuration
@Slf4j
public class WebMvcConfiguration extends WebMvcConfigurationSupport {

    @Autowired
    private JwtTokenAdminInterceptor jwtTokenAdminInterceptor;

    @Autowired
    private JwtTokenUserInterceptor jwtTokenUserInterceptor;

    /**
     * register custom interceptors
     *
     * @param registry
     */
    protected void addInterceptors(InterceptorRegistry registry) {
        log.info("Start registering custom interceptor...");

        registry.addInterceptor(jwtTokenAdminInterceptor)
                .addPathPatterns("/admin/**")
                .excludePathPatterns("/admin/employee/login");

        registry.addInterceptor(jwtTokenUserInterceptor)
                .addPathPatterns("/user/**")
                .excludePathPatterns("/user/user/login")
                .excludePathPatterns("/user/shop/status");
    }

    /**
     * Generate API documentation through Knife4j;
     * Knife4j is a enhanced solution for integrating Swagger with Spring Boot applications.
     * @return
     */
    @Bean
    public Docket docket() {
        log.info("Generating API documentation...");
        ApiInfo apiInfo = new ApiInfoBuilder()
                .title("MoorDash API documentation")
                .version("2.0")
                .description("Project MoorDash's API documentation, generated by Swagger.")
                .build();
        Docket docket = new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo)
                .select()
                .apis(RequestHandlerSelectors.basePackage("com.moordash.controller"))
                .paths(PathSelectors.any())
                .build();
        return docket;
    }

    /**
     * Set up the static resource mapping for Swagger
     * @param registry
     */
    protected void addResourceHandlers(ResourceHandlerRegistry registry) {
        log.info("Setting up static resource mapping for Swagger...");
        registry.addResourceHandler("/doc.html").addResourceLocations("classpath:/META-INF/resources/");
        registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
    }

    /**
     * Expand the message converter of the Spring MVC framework
     * @param converters
     */
    protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
        log.info("Expanding message converter...");

        // create a message converter object
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();

        // set an object converter for the message converter, which can serialize Java objects into json data
        converter.setObjectMapper(new JacksonObjectMapper());

        // add the message converter to the container
        converters.add(0,converter);
    }

    @Bean
    public Docket docket1(){
        log.info("Generating API documents...");
        ApiInfo apiInfo = new ApiInfoBuilder()
                .title("MoorDash - API documents")
                .version("2.0")
                .description("Designs, regulations and specifications for MoorDash API.")
                .build();

        Docket docket = new Docket(DocumentationType.SWAGGER_2)
                .groupName("admin-side interface")
                .apiInfo(apiInfo)
                .select()
                // specify the package to scan for generating interfaces
                .apis(RequestHandlerSelectors.basePackage("com.moordash.controller.admin"))
                .paths(PathSelectors.any())
                .build();

        return docket;
    }

    @Bean
    public Docket docket2(){
        log.info("Generating API documents...");
        ApiInfo apiInfo = new ApiInfoBuilder()
                .title("MoorDash - API documents")
                .version("2.0")
                .description("Designs, regulations and specifications for MoorDash API.")
                .build();

        Docket docket = new Docket(DocumentationType.SWAGGER_2)
                .groupName("user-side interface")
                .apiInfo(apiInfo)
                .select()
                // specify the package to scan for generating interfaces
                .apis(RequestHandlerSelectors.basePackage("com.moordash.controller.user"))
                .paths(PathSelectors.any())
                .build();

        return docket;
    }
}
